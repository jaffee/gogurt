* Overview

The basic idea here is for me to write a little bit of go code every
day, and then write about what I did. The rules are to do SOMETHING
every day that involves pushing some code to github. If I don't, my
wife gets ten bucks for her clothes shopping fund. If I do, then for
every 7 day streak, I get ten bucks for my 'buy whatever I want'
fund. The purpose is threefold:

1. Learn go.
2. Have consistent github activity.
3. Improve writing and blogging skills.

Hopefully soon, pushing code and posts will automatically update the
site, and I'll have some pretty way to display the code I wrote along
side the post.


** Day 1
Got basic structure set up - mostly looking here:
https://golang.org/doc/code.html

Basic HTTP server running - http://golang.org/doc/articles/wiki/

** Day 2
Today I added some html files, still loosely following the "Writing
Web Applications" page from yesterday.

Go's 'html/template' works by passing a struct to the template's
Execute method which contains fields named the same as the variables
in the template. I haven't played around with what happens if you have
stuff in your struct that isn't in the template or vice versa.

So now I have a root page and another page at '/day/' - goes handlers
seem to do routing by a variant of longest prefix matching, as the '/'
url matches all, but the '/day/' gets used if the URL starts with
/day/ (or just /day interestingly). But if you have handler for
'/day', that will only match '/day'.

After that was going, I started poking around at Github's API - the
idea is going to be to automatically create the page for whatever date
is specified in the URL, i.e. '/day/20150319', by pulling the post and
any commits for the day from Github. Once the day is over, I'll cache
that data in a file so that we don't need to pound github on every
request.

It looks like github's api will be fairly simple - no auth appears to
be necessary, and the URL structure is straightforward. I've got some
ideas for parsing JSON in go based on some things that were said at
the ATX golang meetup, so we'll see how that goes.

** Day 3
Switched gears and did this: [[http://github.com/jaffee/robpike.io]]

** Day 4
Started on =github.go= using net/http to hit the github api, and
encoding/json to read json data into defined type/structs. Not sure
how to read in something like the repos_url which is an array at the
top level... will have to play around with that.
** Day 5
Today I started integrating the github api code with the
website/server code. I had to move github.go into a github directory
in order to make go happy with my package structure, run =go build= on
the github package, then =go run= on gogurt/main.go. But I was able to
import and use functions defined in github.go from main.go, so that's
solid.

I also learned how to loop over slices in templates which used kind of
an odd syntax, but you can see it in =day.html=

I played with the time package quite a bit, getting the current time,
pulling the year, month, and day out of it, and then constructing a
new time with H,M,S set to 0 in order to get the beginning of the day.

I also figured out how to parse JSON into a slice of objects which was
cool.

Tomorrow I'm going to install go auto-complete into emacs so that I
can move a bit faster on silly things like string operations, and then
have my git commits from the previous day displayed on the webpage
(pretty close right now I think).

** Day 6
Set up autocomplete in emacs with company mode and gocode. Seems to
work pretty nicely.

Figured out how to strip the {sha} part of commit urls with
strings.Replace. A little strange to me that strings themselves don't
have methods and you have to use external methods, but I know that's
just a product of too much Python.
** Day 7
Today I was pretty lame - tried breaking up the big getcommits
function, and trying to figure out a way to unmarshal json into the
correct size slice - without having to try to guess the size first.
** Day 8
Wrote a function to pretty print json using json.Indent - then started
reading "effective go".

Also made use of bytes.Buffer - will have to explore bytes lib more.
** Day 9
I've been reading about reflection as I try to figure out how
json.Unmarshal works. I want to figure out how it unmarshals json
arrays into slices so I can figure out how to allocate slices
beforehand. ...and I figured it out - Unmarshal automatically
allocates according to the documentation, so all you have to do is
declare the slice like so

** Day 10
Starting to learn the hard lessons of no generic functions in go (like
'map'). I guess it's not too bad to just write a quick for loop, and
maybe it's worth it for the type safety?

I'm thinking a Post will consist of a title and a some repositories
which I'll hard code for now, and then each repository will be a name
and some commits (all of this is on a per day basis), so each page
will be a list of repos with their commits next to them. Not sure how
I'll work the posts in yet.
#+begin_src go
	var commits_slice []commit
#+end_src

** Day 11
Whew. Big day.
1. Created a new repo which pulls all commits related to a list of
   repos for a day and writes them to a file. (This file will be
   consumed by gogurt is the plan)
2. Wrote my first go test (huge!).
3. Learned a bit about how go's package structure works. It's a bit
   limiting but I guess that's a good thing. This is the reason why I
   ended up splitting the github querying stuff into another repository.
4. Will need to pass a specific header in order to get actual diffs
   per commit - read a bit about how to do this.
5. Learned about Sprintf for easy creation of strings from various
   objects.

Tomorrow I'll either work on getting diffs, or having gogurt read the
files generated by go github.
** Day 12
Took wayyyyy too long, but I got the diffs. I figured out how to send
the header pretty quickly, but wasn't getting diffs back for quite a
while. I tried using wireshark to see if the header was getting dumped
correctly, but then got stymied by the fact that all github api
traffic happens over SSL. A brief tour down "decoding TLS traffic with
wireshark" lane convinced me that it was more trouble than it was
worth (although possible).

I ended up comparing my working curl command with my non working go
code, and realized the URLs were different. Curl was pulling a
specific commit (by sha), whereas I was still trying to pull a bunch
of commits in go. I had to refactor my code to get the list of
commits, and then pull each one separately with the correct header
set, and that worked just dandily.
** Day 13
So close. I've encountered some kind of template processing bug while
attempting to get unmarshaled json read from a file rendered as a
template.

It appears to be having trouble escaping something, but what's odd is
that the bug occurs even when I take everything out of the
template. It's going to take some more digging to figure out what's
going on... guess I know what I'm doing tomorrow.
** Day 14
Alright! We have a page. With CSS. What great joy!

It turned out that my horrible template bug from yesterday was because
I was running gogurt from a different directory and it couldn't find
the .html file... doh.

Then I couldn't get any browsers to use my css file which after a
while I realized was because I was serving the file by reading the
bytes and then just giving it to the writer object. Using
http.Servefile seems to set the headers properly and the CSS got
applied.
** Day 15
Made use of ioutil.ReadDir to do effectively do an `ls` on the
directory with all the activity files, and then used some stuff from
the strings package to get just the date part of the filename and gave
the list of those to the root template to populate the root page with
links to all the date pages.

Pretty straightforward day... getting more comfortable in go, no major
problems.

I've got some grand ideas for a chatbot sometime soon, and I'd also
like to do a file watcher that will rebuild my code and restart the
server whenever files change - Flask style (probably 170 other web
frameworks too).

** Day 16
Started doing some work on the github fetcher - I'd like to make it a
long running process that repeatedly checks to see what days it needs
to fetch, and then does so. I'd also like it to be resilient to
problems with the github api - it going down, rate limiting, etc.

Today I converted all my function calls to explicitly return error
values so that I could see what was going on higher up the stack and
decide whether to wait and retry or not. In retrospect, I think it
would be a lot cleaner to panic and defer, but we'll see.

Tomorrow I'd like to implement the "long runningness" and
resilience. I'll need to make a checker that figures out what days
need to be pulled based on current files and current date, and then
the puller which continuously tries to pull down all the stuff
necessary for a given day, intelligently waiting and retrying as
necessary.
** Day 17
Today I wrote the checker that figures out what days are not
represented among the activity files in the time range we're looking
at. It looks a little complex, but I've got some ideas to break it
out. Ideally, I think it will take in just a list and a start and end
date and will return a list of the days not represented in the input
list - I'll take care of all the I/O and normalization outside of
it.

Writing this function made me feel like Go is a lot more verbose than
Python - that may be partially due to the fact that I don't know the
right way to do things, but I think it also is likely due to lots of
explicit error handling and type converting. Because functions like
Atoi return both an error val and an int, you can't call them inline
in a function call, and because you have to handle the error, that
means that what was once one line is now at least 3.

I have also noticed however that bugs are pretty easy to track down -
especially when you handle errors (if you don't it's a nightmare - see
the 'template' bug from a few days ago). Where in Python I usually
resort to a debugger as soon as something goes wrong, in Go the errors
have been pretty straightforward based on the message and line
number. The number of things that can go wrong on any one line is
tightly constrained due to being able to do less on a line, and all
the type constraints that you know were enforced at compile time.

It's a different paradigm than I'm used to, and it's a little annoying
when your trying to throw down some code quickly, but it's also more
predictable time-wise, and I think it will pay off as codebases grow
larger.

** Day 18
Today I wrote the main loop for the long running process behavior and
am testing it... as we speak. er... as I write.

To do this, I implemented the behavior for tolerating rate limits -
this involves checking the http status code and then reading the
header to see when the rate limit will be lifted, and sleeping until
then. I implemented this behavior right inside the functions that make
the http request, so they can potentially sleep for a long time - this
is probably bad design, but hey... put it on the list of things to
refactor.

I ran into a lot of silly type problems, so I'm getting more facile at
converting everything properly. Usually you can just call the name of
the type like a function to convert the value i.e. int64(someint),
although this isn't always possible. I hope to be able to write a more
coherent explanation of why not soon.

-- time passes --

Ok, it finished its first round... it created all the right files, but
they're all empty.... sigh. I'll have to track this one down tomorrow.

** Day 19
Guess I fixed the bug. I definitely fixed another bug, and now things
seem to be working. My code to determine if the previous date was 1
day behind the current date kinda sucked, so I wrote an actual
function and test that seems to work very well. This was helped by the
fact that go Time objects roll over in a nice way - i.e. December 32
is January 1st of the next year.

Re-running the whole thing now - ratelimit should reset in a few
minutes and we'll see if that works.

... and it seems to have - and it ran out again. Not sure how it needs
so many requests. I'm sleepy.

** Day 20
Busy day, and I have less than four minutes to write this.

I fixed a couple problems in the github puller, and I think it's
working pretty nicely now. One issue was that timezone stuff wasn't
working as expected, but I got that sorted out, so commits should
appear on the right dates now.

I started a new project called gosup, which stand for go
supervisor. The idea is that it will run a program, and then watch all
related files for changes and restart or re-run the program whenever
files change. Should be pretty cool - I'm looking into some other go
libraries and projects for file change notification - maybe I'll even
get to contribute elsewhere :)

** Day 21
Added a file watcher and run loop to gosup. It now watches the file,
tries to kill the process when it changes, and then starts a new
process.

Unfortunately, the process is not being killed for some reason. I
found an unanswered SO post that seems to have the same
issue.
http://stackoverflow.com/questions/22470193/why-wont-go-kill-a-child-process-correctly
** Day 22
Welp, I fixed the cmd.Kill issue from yesterday - added some links to
the SO post to explain it. Basically had to make sure all the child
processes were killed as well - unfortunately my fix is platform
dependent - fortunately it works on all the platforms I care about.

Another problem that I had was that killing gosup with C-c did not
kill the child process, so I had to add a signal handler which would
send the kill signal to the subprocess. Additionally, I had to make
sure that the subprocess finished getting killed before calling
os.Exit in the signal handler thread. To do this I made use of the
same channel that was used to send the kill, to send back that the
kill was complete - I had to switch to an unbuffered channel so that
the process sending the kill signal didn't receive its own signal. Fun
times.

** Day 23
I started refactoring the github puller into a library for hitting the
github api, and the cmd subdirectory which houses the executable which
deals with command line input and calls functions in the github lib to
pull things from the api.

Right now, running `go install` inside the cmd directory builds an
executable called "cmd" - I'd like it to be called something else, and
I'm not sure if there is a way to change it without changing the
directory name.

Refactoring is also simplifying the code - most notably, instead of
passing year, month, and day around, I just pass the date object
everywhere - much nicer.

** Day 24

Some sleepy refactoring tonight - I fixed the timezone formatting bug
again - could have sworn I'd already done that, but it was still
busted. For some reason installing and running cmd was not picking up
changes in github, and I was unable to figure out why tonight. But I'm
not in a state for figuring out much right now, so I think I'll call
it a night and regroup tomorrow.

** Day 25
Here's the deal, pretty simple. My binary wasn't being rebuilt because
I changed the package name to "cmd" from "main". Your go package must
be "main" if you want a binary. I didn't notice, because it doesn't
complain at you if your package name isn't main, and the old binary
that had been previously built was still on my PATH.

Lessons of go: a programming language should be flexible in what you
can do with your programs, but inflexible in how you build your
program. If there's only one way to generate a binary, then every
program in that language that had to generate a binary will do it the
same way, and developer confusiong will be greatly reduced. That's
awesome for something that doesn't really matter how you do it, as
long as there is a way and its fairly straighforward. If there was
only one way to listen for an http connection, that would be too
restrictive - what if you wanted to implement some custom logic around
it based on the round trip time or something? You wouldn't be able to
if you were locked in to that one way. When designing a programming
language, decisions should be made with an eye toward removing
opportunities for bikeshedding - if it doesn't matter how it gets
done, make sure there's only one way to do it.

In other news today, I didn't commit that much - except for fixing
that problem and not displaying repos with no commmits for the day on
gogurt. I also started working on getting gogurt actually online,
which began to necessitate breaking out config from code - I'll work
on that tomorrow. I'm also going to work on cutting down the amount of
config by figuring out which repositories have go code in them on the
fly and grabbing those.

** Day 26

Here is the post for today, I broke stuff out into a config file. I
really need to get better at building and running go programs, I've
wasted so much time running old code by mistake AGGGG

** Day 27
Broke github cmd config into a file. Basically I'm just unmarshaling
the json and then copying it to the global variables. Had to do some
hijinks with dates to get those to work. Apparently if your format
string is supposed to have location info, using ParseInLocation
doesn't work properly, so I had to use a custom format string which
was basically RFC3339 with the Z part stripped off.

** Day 28
Hopefully finish up getting config squared away. Getting ready to push
out to jaffee.co. Didn't actually write much code tonight, but s'all
good.
** Day 29
I tried to get gogurt launched today but got a little sidetracked. I
noticed that robpike.jaffee.co didn't seem to be working, and digging
through my nginx config showed that there was no trace of
robpike.io. Luckily there was an nginx.conf~ file that had my old
config and I restored it, but I have no idea how that happened.

Anyway I made a couple tweaks to robpike.io and tried to redeploy it
under gosup. gosup needs fsnotify, so I tried go getting it on my
server - that failed with an error message about syscall.Pipe2 being
undefined. I'm not sure if this has to do with me running an
incompatible version of go or something, but it's more than I want to
deal with tonight. I did already spend a few hours at the go meetup
tonight, so I figure I've done due diligence :)

** Day 30
Did a small amount of cleanup in gosup - which gave me some future
work ideas. gosup is really bad a figuring out which files to watch
right now - I'd like to fix that, or at least add options to be able
to pass in which files/dirs to watch.

One thought was to watch the binary for the actual program being
executed - that would be easy enough, but wouldn't work in all
cases. (such as go run x.go). It would work for installed go programs
though, and might be a good place to start.

Beyond that, looking at all processes in the process group and
determining their locations might be an interesting challenge. Also
having the ability to pass in extra files like a config file would
probably be helpful as well.

It just occurred to me that watching the binary isn't enough for
development - you have to watch the source files and then
automatically rebuild and re-run when they change. There is no general
way to do that. This might end up being a go specific tool which uses
the GOPATH to try to figure out from the binary which files to watch -
although even that might not be possible without following some naming
conventions. I'm beginning to think that explicit passing may just be
the best option...

** Day 32
Welp - I missed a day - at least for the post, I did commit some code
though. I'm refactoring github.go to be more library-y. Building out
all the structs to Unmarshal json and having an "Api" object (name may
change) which users will use as the main interaction point -
Api.Repositories, Api.Commits, etc.

Should be fun... we'll see how it goes.

** Day 33
Man I suck, these commits are getting lamer and lamer. I decided I
need a way to store github responses, so I figure a json document
store would be fun to do. Didn't get much done though, pretty sleepy.
** Day 34
Things went a bit better today. I did some thinking about goikos and
how I wanted it to accept binary gobs and store them efficiently -
then I decided I would need some kind of client program to exercise
it, and started digging back into the github api stuff. That took me
down the rabbit hole of how to properly handle errors, and how to
decide what action to take based on an error's type.

You can do something like err.(type), but only inside a switch
statement which I found to be very odd. Will have to learn more about
that.

** Day 35
Today I did an easy hackerrank problem because I didn't have much
time. I do need to keep practicing though - easy things are still
hard! Derp - how do I iterate over an array of ints again? How do I
initialize it?
** Day 36
Couple more hackerrank problems today - need to start looking at other
answers to see better go code.

I also got an idea for something I'd like to do as soon as I get some
more time. Basically I want to write the server for a multiplayer
browser game which is played over some kind of basic HTTP API. I think
it'd be a lot of fun to see many clients connecting and battling it
out in some way - sort of similar to nodewar of old.

** Day 37
I re-wrote the song of pi hackerrank problem using more help from
libraries after reading through some of the other hackerrank
solutions. Most notably, strings.Split was helpful, and bufio reader's
.ReadString method. I also figured out a syntax for declaring top
level variables that seems to work... not sure why I couldn't do that
before...
** Day 38
Been thinking about the multiplayer game, but the only code I did
today was an easy hackerrank problem. I don't think I learned much new
with that.

Game wise, I think I need to just implement something simple to get
the flavor... I'll keep thinking...

** Day 39
Another hackerrank this morning - one of the INTRO questions on their
AI section is TSP.... like... wat? Apparently they just don't have any
hard testcases, but how are you supposed to know that going in? Blerg.

In other news I've done a bunch more thinking and a little coding on
the multiplayer game. I threw out the idea of doing something
stateless pretty early on. The whole idea here is to do something
kinda real-timey and manage a bunch of connections at once.

I'm going to do something like pocket tanks. User connects, says "I
want to start a game" he's added to a queue - two users are pulled off
the queue and matched up. They are each sent an initial game state
consisting of the arena, their position, their opponent's position,
initial ammo supply and uh... probably some other stuff... gravity?

The players then send back their shots which consist of the angle they
are firing at, and the power... or maybe just angle, who knows. But
here's the clincher - it isn't turn based - you can fire all ten shots
right at once if you want - the only limiting factor is that you have
to wait for a response as to the outcome of your shot from the server
IF you want to adjust your aim based on the results. I'm hoping this
will lead to some interesting strategical decisions... also make it
very difficult to play as a human.

The other thing I haven't mentioned yet is that there will be
wind... but you don't know how hard it's blowing until you fire - then
you can try to deduce that information.

I think it'll be fun! We'll find out.



** Day 40
Busy day - tried to do maximum sum subarray problem but got bugs.
** Day 41
Alright - I'm going to be extra lame today - I fixed the bugs in the
subarray problem last night and committed after midgnight... I'm
counting it. I do at least have some interesting discussion to go with
it though.

This problem had some large testcases which were checking for a
performant solution. My first solution timed out on one test case,
although I was quite sure that it was algorithmically correct -
O(n). I've had this problem in the past on hackerrank and suspected
that it might be an I/O issue. I was using fmt.Scan to read in all the
input.

I decided to forgo the remaining points and inspect some other entries
in Go that had gotten the maximum amount of points. The first solution
I looked at was very similar to mine except that it used a
bufio.Reader and fmt.Fscan. Doing this simple conversion allowed me to
pass the final testcase.

I'm assuming this was due to the buffered reader reading in a large
chunk of the file at once and then scanning it in from memory instead
of reading a couple bytes at a time with each Scan call - in any case
I'm glad it worked. I may need to go back and find that other problem
I struggled with...

** Day 42
Partially implemented a hackerrank problem... I know, I know lame
city. This problem is pretty tough though and I'm beat - I'll try to
do better tomorrow, although no promises on getting anything cool done
until next week - lot going on right now.
* Future work ideas
- get code running on some hosting
- set up git hooks to restart it every time there's a push
- write a supervisor in go to restart it if it dies.
- write an strace converter - looks at strace output and converts it
  to a nice friendly human readable explanation
- online multiplayer game with many clients sending state stuff to the server
